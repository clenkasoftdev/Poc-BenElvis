# This is a basic workflow to help you get started with Actions

name: CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push to the "main" branch. Deployment only happens on main branch
  push:
    branches: [ "main" ]
    paths:
      - 'src/**'
      - 'infra/**'
      - '.github/workflows/**'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  # A workflow run is made up of one or more jobs that can run sequentially or in parallel

jobs:
  terraform:
    name: Terraform
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TERRAFORM_WORKING_DIRECTORY: './infra/terraform'
      BACKEND_RESOURCE_GROUP_NAME: ${{ secrets.STATE_RESOURCE_GROUP_NAME }}
      BACKEND_STORAGE_ACCOUNT_NAME: ${{ secrets.STATE_STORAGE_ACCOUNT_NAME }}
      BACKEND_STORAGE_CONTAINER_NAME: ${{ secrets.STATE_CONTAINER_NAME }}
      BACKEND_STORAGE_CONTAINER_KEY: ${{ secrets.STATE_KEY }}
      TF_VERSION: 1.5.5
    
    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        shell: bash

    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: ${{ env.TF_VERSION }}
      
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}

      - name: Terraform Init
        id: init
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: |
          set -a
          -backend-config="resource_group_name=$BACKEND_RESOURCE_GROUP_NAME" 
          -backend-config="storage_account_name=$BACKEND_STORAGE_ACCOUNT_NAME"
          -backend-config="container_name=$BACKEND_STORAGE_CONTAINER_NAME"
          -backend-config="key=$BACKEND_STORAGE_CONTAINER_KEY"
      
      - name: Terraform validate
        id: validate
        run: terraform validate -no-color
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}

      - name: Terraform Plan
        id: plan
        run: terraform plan  -no-color
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}

      - name: Terraform Apply
        id: apply
        run: terraform apply -auto-approve 
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}

  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    env:
      FUNCTIONAPP_NAME: 'Clenka.BenElvisPoc.FuncApp'
      FUNCTIONAPP_WORKING_DIRECTORY: './src/FunctionApp/BenElvisPoc'
      DOTNET_VERSION: '8.0.x'
      ENVIRONMENT_NAME: 'dev'

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it (v4 is the latest version of the action. v3 used Node.js 16 which is deprecated)
      - uses: actions/checkout@v4
      - name: Log in with Azure
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
      
      - name: Setup Function app .NET Version to ${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Resolve Project Dependencies Using .NET
        run: dotnet restore 
        working-directory: ${{ env.FUNCTIONAPP_WORKING_DIRECTORY }}

      - name: Build function app
        run: dotnet build --configuration Release --no-restore
        working-directory: ${{ env.FUNCTIONAPP_WORKING_DIRECTORY }}

      - name: Test Azure Function app
        run: dotnet test --no-restore --verbosity normal --filter Category=Unit
        working-directory: ${{ env.FUNCTIONAPP_WORKING_DIRECTORY }}
      
      - name: Publish Function App
        run: dotnet publish **/${{ env.FUNCTIONAPP_NAME }}.csproj --configuration Release --output ./publish
        working-directory: ${{ env.FUNCTIONAPP_WORKING_DIRECTORY }}
      
      - name: Generate Deployment package
        run: |
          zip -r ../${{ env.FUNCTIONAPP_NAME }}.zip ./
        working-directory: ${{ env.FUNCTIONAPP_WORKING_DIRECTORY }}/publish

      - name: Upload deployment package
        uses: actions/upload-artifact@v2
        with:
          name: functionapp-deployment-package
          path: ${{ env.FUNCTIONAPP_WORKING_DIRECTORY }}/${{ env.FUNCTIONAPP_NAME }}.zip

